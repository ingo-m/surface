# Generated by Neurodocker v0.3.2.
#
# Thank you for using Neurodocker. If you discover any issues
# or ways to improve this software, please submit an issue or
# pull request on our GitHub repository:
#     https://github.com/kaczmarj/neurodocker
#
# Timestamp: 2018-03-22 15:44:34

FROM debian:jessie

ARG DEBIAN_FRONTEND=noninteractive

#----------------------------------------------------------
# Install common dependencies and create default entrypoint
#----------------------------------------------------------
ENV LANG="en_US.UTF-8" \
    LC_ALL="C.UTF-8" \
    ND_ENTRYPOINT="/neurodocker/startup.sh"
RUN apt-get update -qq && apt-get install -yq --no-install-recommends  \
    	apt-utils bzip2 ca-certificates curl locales unzip \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && localedef --force --inputfile=en_US --charmap=UTF-8 C.UTF-8 \
    && chmod 777 /opt && chmod a+s /opt \
    && mkdir -p /neurodocker \
    && if [ ! -f "$ND_ENTRYPOINT" ]; then \
         echo '#!/usr/bin/env bash' >> $ND_ENTRYPOINT \
         && echo 'set +x' >> $ND_ENTRYPOINT \
         && echo 'if [ -z "$*" ]; then /usr/bin/env bash; else $*; fi' >> $ND_ENTRYPOINT; \
       fi \
    && chmod -R 777 /neurodocker && chmod a+s /neurodocker
ENTRYPOINT ["/neurodocker/startup.sh"]

USER root

RUN apt-get update -qq \
    && apt-get install -y -q --no-install-recommends gcc \
                                                     g++ \
                                                     tree \
                                                     nano \
                                                     htop \
                                                     rsync \
                                                     pigz \
                                                     git \
                                                     file \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#--------------------------------------------------
# Add NeuroDebian repository
# Please note that some packages downloaded through
# NeuroDebian may have restrictive licenses.
#--------------------------------------------------
RUN apt-get update -qq && apt-get install -yq --no-install-recommends dirmngr gnupg \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && curl -sSL http://neuro.debian.net/lists/jessie.de-md.full \
    > /etc/apt/sources.list.d/neurodebian.sources.list \
    && curl -sSL https://dl.dropbox.com/s/zxs209o955q6vkg/neurodebian.gpg \
    | apt-key add - \
    && (apt-key adv --refresh-keys --keyserver hkp://pool.sks-keyservers.net:80 0xA5D32F012649A5A9 || true) \
    && apt-get update

# Install NeuroDebian packages
RUN apt-get update -qq && apt-get install -yq --no-install-recommends dcm2niix fsl-complete \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

#----------------------
# Install MCR and SPM12
#----------------------
# Install MATLAB Compiler Runtime
RUN apt-get update -qq && apt-get install -yq --no-install-recommends libxext6 libxt6 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \
    && echo "Downloading MATLAB Compiler Runtime ..." \
    && curl -sSL --retry 5 -o /tmp/mcr.zip https://www.mathworks.com/supportfiles/downloads/R2015a/deployment_files/R2015a/installers/glnxa64/MCR_R2015a_glnxa64_installer.zip \
    && unzip -q /tmp/mcr.zip -d /tmp/mcrtmp \
    && /tmp/mcrtmp/install -destinationFolder /opt/mcr -mode silent -agreeToLicense yes \
    && rm -rf /tmp/*

# Install standalone SPM
RUN echo "Downloading standalone SPM ..." \
    && curl -sSL --retry 5 -o spm.zip http://www.fil.ion.ucl.ac.uk/spm/download/restricted/utopia/dev/spm12_r6472_Linux_R2015a.zip \
    && unzip -q spm.zip -d /opt \
    && chmod -R 777 /opt/spm* \
    && rm -rf spm.zip \
    && /opt/spm12/run_spm12.sh /opt/mcr/v85/ quit \
    && sed -i '$iexport SPMMCRCMD=\"/opt/spm12/run_spm12.sh /opt/mcr/v85/ script\"' $ND_ENTRYPOINT
ENV MATLABCMD=/opt/mcr/v85/toolbox/matlab \
    FORCE_SPMMCR=1 \
    LD_LIBRARY_PATH=/usr/lib/x86_64-linux-gnu:/opt/mcr/v85/runtime/glnxa64:/opt/mcr/v85/bin/glnxa64:/opt/mcr/v85/sys/os/glnxa64:$LD_LIBRARY_PATH

# Add command(s) to entrypoint
RUN sed -i '$isource /etc/fsl/5.0/fsl.sh' $ND_ENTRYPOINT

# Create new user: john
RUN useradd --no-user-group --create-home --shell /bin/bash john
USER john

#------------------
# Install Miniconda
#------------------
ENV CONDA_DIR=/opt/conda \
    PATH=/opt/conda/bin:$PATH
RUN echo "Downloading Miniconda installer ..." \
    && miniconda_installer=/tmp/miniconda.sh \
    && curl -sSL --retry 5 -o $miniconda_installer https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh \
    && /bin/bash $miniconda_installer -b -p $CONDA_DIR \
    && rm -f $miniconda_installer \
    && conda config --system --prepend channels conda-forge \
    && conda config --system --set auto_update_conda false \
    && conda config --system --set show_channel_urls true \
    && conda clean -tipsy && sync

#-------------------------
# Create conda environment
#-------------------------
RUN conda create -y -q --name py_main -c conda-forge python=2.7 \
                                                     numpy \
                                                     scipy \
                                                     pip \
                                                     scikit-image \
    && sync && conda clean -tipsy && sync \
    && sed -i '$isource activate py_main' $ND_ENTRYPOINT

#-------------------------
# Create conda environment
#-------------------------
RUN conda create -y -q --name py_segmentator -c conda-forge python=2.7 \
                                                            pip \
    && sync && conda clean -tipsy && sync

# User-defined BASH instruction
RUN bash -c "mkdir /home/john/github                 && cd /home/john/github                 && git clone https://github.com/ingo-m/segmentator.git                 && cd /home/john/github/segmentator                 && git checkout docker-EED                 && git checkout a77bcda769e9f252db8c6c9cf74047d901f4eca1                 && source activate py_segmentator                 && pip install -r requirements.txt                 && python setup.py install"

# User-defined BASH instruction
RUN bash -c "source activate py_main && pip install pyprf"

# User-defined BASH instruction
RUN bash -c "echo \"export USER=john\" > /home/john/.bashrc"

# User-defined BASH instruction
RUN bash -c "echo \"export USER=john\" > /home/john/.profile"

# User-defined BASH instruction
RUN bash -c "echo \"export OPENBLAS_NUM_THREADS=1\" >> /home/john/.bashrc"

# User-defined BASH instruction
RUN bash -c "echo \"export OPENBLAS_NUM_THREADS=1\" >> /home/john/.profile"

# User-defined BASH instruction
RUN bash -c "echo \"export MKL_NUM_THREADS=1\" >> /home/john/.bashrc"

# User-defined BASH instruction
RUN bash -c "echo \"export MKL_NUM_THREADS=1\" >> /home/john/.profile"

# User-defined BASH instruction
RUN bash -c "echo \"export NUMEXPR_NUM_THREADS=1\" >> /home/john/.bashrc"

# User-defined BASH instruction
RUN bash -c "echo \"export NUMEXPR_NUM_THREADS=1\" >> /home/john/.profile"

# User-defined BASH instruction
RUN bash -c "echo \"source activate py_main\" >> /home/john/.bashrc"

# User-defined BASH instruction
RUN bash -c "echo \"source activate py_main\" >> /home/john/.profile"

WORKDIR /home/john

#--------------------------------------
# Save container specifications to JSON
#--------------------------------------
RUN echo '{ \
    \n  "pkg_manager": "apt", \
    \n  "check_urls": true, \
    \n  "instructions": [ \
    \n    [ \
    \n      "base", \
    \n      "debian:jessie" \
    \n    ], \
    \n    [ \
    \n      "user", \
    \n      "root" \
    \n    ], \
    \n    [ \
    \n      "install", \
    \n      [ \
    \n        "gcc", \
    \n        "g++", \
    \n        "tree", \
    \n        "nano", \
    \n        "htop", \
    \n        "rsync", \
    \n        "pigz", \
    \n        "git", \
    \n        "file" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "neurodebian", \
    \n      { \
    \n        "os_codename": "jessie", \
    \n        "download_server": "germany-magdeburg", \
    \n        "pkgs": "dcm2niix fsl-complete" \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "add_to_entrypoint", \
    \n      [ \
    \n        "source /etc/fsl/5.0/fsl.sh" \
    \n      ] \
    \n    ], \
    \n    [ \
    \n      "user", \
    \n      "john" \
    \n    ], \
    \n    [ \
    \n      "miniconda", \
    \n      { \
    \n        "env_name": "py_main", \
    \n        "conda_install": "python=2.7 numpy scipy pip scikit-image", \
    \n        "conda_opts": "-c conda-forge", \
    \n        "activate": true \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "miniconda", \
    \n      { \
    \n        "env_name": "py_segmentator", \
    \n        "conda_install": "python=2.7 pip", \
    \n        "conda_opts": "-c conda-forge", \
    \n        "activate": false \
    \n      } \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "mkdir /home/john/github                 && cd /home/john/github                 && git clone https://github.com/ingo-m/segmentator.git                 && cd /home/john/github/segmentator                 && git checkout docker-EED                 && git checkout a77bcda769e9f252db8c6c9cf74047d901f4eca1                 && source activate py_segmentator                 && pip install -r requirements.txt                 && python setup.py install" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "source activate py_main && pip install pyprf" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"export USER=john\" > /home/john/.bashrc" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"export USER=john\" > /home/john/.profile" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"export OPENBLAS_NUM_THREADS=1\" >> /home/john/.bashrc" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"export OPENBLAS_NUM_THREADS=1\" >> /home/john/.profile" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"export MKL_NUM_THREADS=1\" >> /home/john/.bashrc" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"export MKL_NUM_THREADS=1\" >> /home/john/.profile" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"export NUMEXPR_NUM_THREADS=1\" >> /home/john/.bashrc" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"export NUMEXPR_NUM_THREADS=1\" >> /home/john/.profile" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"source activate py_main\" >> /home/john/.bashrc" \
    \n    ], \
    \n    [ \
    \n      "run_bash", \
    \n      "echo \"source activate py_main\" >> /home/john/.profile" \
    \n    ], \
    \n    [ \
    \n      "workdir", \
    \n      "/home/john" \
    \n    ] \
    \n  ], \
    \n  "generation_timestamp": "2018-03-22 15:44:34", \
    \n  "neurodocker_version": "0.3.2" \
    \n}' > /neurodocker/neurodocker_specs.json
